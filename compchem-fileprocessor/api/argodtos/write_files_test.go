package argodtos

import (
	"encoding/json"
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

// templated by me, generated by claude AI
func TestWriteFiles_AllArgumentsSupplied_ProperlyFormedTask(t *testing.T) {
	// Arrange
	recordId := "12345"
	workflowId := "2"
	previousTaskTemplate := "count-words"
	previousTask := "count-words-12345-2"
	expectedName := fmt.Sprintf(WriteFilesTemplate, previousTaskTemplate, recordId, workflowId)
	expectedDependencies := []string{previousTask}
	expectedTemplateRefName := "write-files-template"
	expectedTemplateRefTemplate := "write-files"

	// Act
	task := NewWriteWorkflow(recordId, workflowId, previousTask, previousTaskTemplate)

	// Assert
	assert.Equal(t, expectedName, task.Name)
	assert.Equal(t, expectedDependencies, task.Dependencies)
	assert.Equal(t, expectedTemplateRefName, task.TemplateReference.Name)
	assert.Equal(t, expectedTemplateRefTemplate, task.TemplateReference.Template)

	// Verify parameters
	assert.Equal(t, 2, len(task.Arguments.Parameters))

	// Check each parameter
	assert.Equal(t, "base-url", task.Arguments.Parameters[0].Name)
	assert.Equal(t, "{{workflow.parameters.base-url}}", task.Arguments.Parameters[0].Value)

	assert.Equal(t, "record-id", task.Arguments.Parameters[1].Name)
	assert.Equal(t, "{{workflow.parameters.record-id}}", task.Arguments.Parameters[1].Value)

	// Verify artifacts
	assert.Equal(t, 1, len(task.Arguments.Artifacts))
	assert.Equal(t, "input-files", task.Arguments.Artifacts[0].Name)
	assert.Equal(
		t,
		fmt.Sprintf("{{tasks.%s.outputs.artifacts.output-files}}", previousTask),
		task.Arguments.Artifacts[0].From,
	)
}

func TestWriteFiles_AllArgumentsSupplied_ProperlyFormedJson(t *testing.T) {
	// Arrange
	recordId := "12345"
	workflowId := "2"
	previousTaskTemplate := "count-words"
	previousTask := "count-words-12345-2"
	task := NewWriteWorkflow(recordId, workflowId, previousTask, previousTaskTemplate)

	// Act
	taskJson, err := json.Marshal(task)

	// Assert
	assert.NoError(t, err)

	// Define expected JSON
	expectedJson := `{
		"name": "write-files-count-words-12345-2",
    "dependencies": ["count-words-12345-2"],
		"templateRef": {
			"name": "write-files-template",
			"template": "write-files"
		},
		"arguments": {
			"parameters": [
				{
					"name": "base-url",
					"value": "{{workflow.parameters.base-url}}"
				},
				{
					"name": "record-id",
					"value": "{{workflow.parameters.record-id}}"
				}
			],
			"artifacts": [
				{
					"name": "input-files",
					"from": "{{tasks.count-words-12345-2.outputs.artifacts.output-files}}"
				}
			]
		}
	}`

	// Normalize both JSON strings for comparison (remove whitespace differences)
	var expected, actual any
	err = json.Unmarshal([]byte(expectedJson), &expected)
	assert.NoError(t, err)

	err = json.Unmarshal(taskJson, &actual)
	assert.NoError(t, err)

	// Re-marshal both to normalized format
	expectedNormalized, err := json.Marshal(expected)
	assert.NoError(t, err)

	actualNormalized, err := json.Marshal(actual)
	assert.NoError(t, err)

	// Compare the normalized JSON strings
	assert.Equal(t, string(expectedNormalized), string(actualNormalized))
}
